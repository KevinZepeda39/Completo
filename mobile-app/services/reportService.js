// services/reportService.js - ARREGLADO PARA USAR USUARIO DEL LOGIN
import AsyncStorage from '@react-native-async-storage/async-storage';

const BASE_URL = 'http://192.168.1.13:3000';

class ReportService {
  constructor() {
    this.baseUrl = BASE_URL;
  }

  // ‚úÖ OBTENER/DETECTAR USUARIO ACTUAL DESDE LOGIN
  async getCurrentUser() {
    try {
      // ‚úÖ BUSCAR PRIMERO EN userSession (del login)
      let userData = await AsyncStorage.getItem('userSession');
      
      if (userData) {
        const session = JSON.parse(userData);
        console.log('‚úÖ User session found in reportService:', session);
        
        // Extraer datos del usuario del session
        const user = {
          idUsuario: session.user?.idUsuario || session.user?.id,
          nombre: session.user?.nombre || session.user?.name,
          correo: session.user?.correo || session.user?.email,
          token: session.token
        };
        
        console.log('üë§ Current user from session:', { 
          id: user.idUsuario, 
          name: user.nombre,
          email: user.correo 
        });
        
        return user;
      }

      // ‚úÖ FALLBACK: Buscar en userData (por compatibilidad)
      userData = await AsyncStorage.getItem('userData');
      if (userData) {
        const user = JSON.parse(userData);
        
        // Validar que tenga el ID correcto (no el temporal)
        if (user.idUsuario && user.idUsuario !== 1) {
          console.log('üë§ Current user from userData:', { 
            id: user.idUsuario, 
            name: user.nombre 
          });
          return user;
        }
      }

      console.log('‚ö†Ô∏è No valid user session found in reportService');
      return null;

    } catch (error) {
      console.error('‚ùå Error getting current user:', error);
      return null;
    }
  }

  // ‚úÖ ESTABLECER USUARIO ACTUAL
  async setCurrentUser(user) {
    try {
      console.log('üíæ Setting current user in reportService:', {
        id: user.idUsuario,
        name: user.nombre
      });
      
      await AsyncStorage.setItem('userData', JSON.stringify(user));
      
      return true;
    } catch (error) {
      console.error('‚ùå Error setting current user:', error);
      return false;
    }
  }

  // ‚úÖ CREAR REPORTE CON USUARIO CORRECTO
  async createReport(reportData, imageFile = null) {
    try {
      console.log('üìù Creating report...');
      console.log('üìã Report data:', reportData);

      // ‚úÖ OBTENER USUARIO ACTUAL
      const currentUser = await this.getCurrentUser();
      
      if (!currentUser) {
        console.error('‚ùå No current user found');
        return {
          success: false,
          error: 'Usuario no encontrado. Por favor, inicia sesi√≥n de nuevo.'
        };
      }

      // ‚úÖ USAR ID DEL USUARIO ACTUAL
      const finalReportData = {
        ...reportData,
        idUsuario: currentUser.idUsuario
      };

      console.log('üë§ Using user ID:', currentUser.idUsuario);
      console.log('üìä Final report data:', finalReportData);

      if (imageFile) {
        console.log('üì∑ Creating report WITH image...');
        return await this.createReportWithImage(finalReportData, imageFile, currentUser.idUsuario);
      } else {
        console.log('üìù Creating report WITHOUT image...');
        return await this.createReportWithoutImage(finalReportData);
      }

    } catch (error) {
      console.error('‚ùå Error in createReport:', error);
      return {
        success: false,
        error: 'Error al crear el reporte'
      };
    }
  }

  // ‚úÖ CREAR REPORTE CON IMAGEN (FORMDATA)
  async createReportWithImage(reportData, imageFile, userId) {
    try {
      console.log('üì∑ Creating report WITH image...');
      console.log('üì∑ Image details:', {
        uri: imageFile.uri,
        type: imageFile.type,
        name: imageFile.fileName || imageFile.name || 'image.jpg'
      });
      console.log('üë§ User ID for image report:', userId);

      // ‚úÖ TEST FORMDATA
      const testFormData = new FormData();
      testFormData.append('test', 'test');
      console.log('üß™ Test FormData created:', testFormData);
      console.log('üß™ FormData entries:', Array.from(testFormData.entries()));

      const formData = new FormData();
      
      // ‚úÖ DATOS DEL REPORTE CON ID CORRECTO
      formData.append('titulo', reportData.titulo || reportData.title || '');
      formData.append('descripcion', reportData.descripcion || reportData.description || '');
      formData.append('ubicacion', reportData.ubicacion || reportData.location || '');
      formData.append('categoria', reportData.categoria || reportData.category || 'general');
      formData.append('idUsuario', userId.toString()); // ‚úÖ ID CORRECTO
      
      // ‚úÖ IMAGEN - MEJORAR MANEJO DE NOMBRE Y TIPO
      const imageName = imageFile.fileName || imageFile.name || `report-${Date.now()}.jpg`;
      const imageType = imageFile.type || 'image/jpeg';
      
      formData.append('imagen', {
        uri: imageFile.uri,
        type: imageType,
        name: imageName
      });

      console.log('üìä FormData created with:');
      console.log('  - titulo:', reportData.titulo || reportData.title);
      console.log('  - descripcion:', reportData.descripcion || reportData.description);
      console.log('  - ubicacion:', reportData.ubicacion || reportData.location);
      console.log('  - categoria:', reportData.categoria || reportData.category);
      console.log('  - idUsuario:', userId);
      console.log('  - imagen:', imageName);
      console.log('  - imageType:', imageType);
      console.log('  - imageUri:', imageFile.uri);
      
      // ‚úÖ VERIFICAR FORMDATA
      console.log('üìä FormData entries:', Array.from(formData.entries()));

      console.log('üì° Sending FormData request...');
      console.log('üì° URL:', `${this.baseUrl}/api/reports/upload`);
      
      // ‚úÖ TEST FORMDATA ENDPOINT
      try {
        const testResponse = await fetch(`${this.baseUrl}/api/reports/upload`, {
          method: 'POST',
          headers: {
            'x-test-formdata': 'true'
          }
        });
        
        if (testResponse.ok) {
          const testResult = await testResponse.json();
          console.log('üß™ FormData test result:', testResult);
        } else {
          console.log('‚ö†Ô∏è FormData test failed:', testResponse.status);
        }
      } catch (testError) {
        console.log('‚ö†Ô∏è FormData test error:', testError.message);
      }

      const response = await fetch(`${this.baseUrl}/api/reports/upload`, {
        method: 'POST',
        body: formData,
        // ‚úÖ REMOVER Content-Type manual - React Native lo maneja autom√°ticamente
        // headers: {
        //   'Content-Type': 'multipart/form-data',
        // },
        // ‚úÖ TIMEOUT MANUAL PARA REACT NATIVE
        // signal: AbortSignal.timeout(120000), // 2 minutos - NO DISPONIBLE EN RN
      });

      console.log('üì° FormData response status:', response.status);
      console.log('üì° FormData response headers:', response.headers);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Report created successfully with FormData');
        return { success: true, data: result };
      } else {
        const errorText = await response.text();
        console.error('‚ùå FormData request failed:', response.status, errorText);
        
        // ‚úÖ INTENTAR PARSEAR EL ERROR COMO JSON
        try {
          const errorJson = JSON.parse(errorText);
          throw new Error(errorJson.error || `Server error: ${response.status}`);
        } catch (parseError) {
          throw new Error(`Server error: ${response.status} - ${errorText}`);
        }
      }

    } catch (error) {
      console.error('‚ùå FormData fetch error:', error);
      console.error('‚ùå Error in FormData request:', error);
      console.log('üìã Error details:', {
        message: error.message,
        name: error.name,
        cause: error.cause,
        stack: error.stack
      });
      
      // ‚úÖ VERIFICAR SI ES ERROR DE RED O SERVIDOR
      if (error.name === 'AbortError') {
        console.log('‚è∞ Timeout error - la imagen es muy grande o la conexi√≥n es lenta');
      } else if (error.message.includes('Network request failed')) {
        console.log('üåê Network error - verificar conexi√≥n a internet');
      } else if (error.message.includes('Server error')) {
        console.log('üñ•Ô∏è Server error - verificar que el backend est√© funcionando');
      }

      // ‚úÖ FALLBACK A JSON SIN IMAGEN
      console.log('üîÑ FormData failed, attempting fallback to JSON without image...');
      console.log('‚ö†Ô∏è La imagen no se pudo subir, pero el reporte se crear√° sin imagen');
      
      const fallbackResult = await this.createReportWithoutImage({
        ...reportData,
        idUsuario: userId
      });
      
      if (fallbackResult.success) {
        console.log('‚úÖ Reporte creado sin imagen como fallback');
        return {
          ...fallbackResult,
          warning: 'La imagen no se pudo subir, pero el reporte se cre√≥ exitosamente'
        };
      } else {
        console.log('‚ùå Fallback tambi√©n fall√≥');
        return fallbackResult;
      }
    }
  }

  // ‚úÖ CREAR REPORTE SIN IMAGEN (JSON)
  async createReportWithoutImage(reportData) {
    try {
      console.log('üìù Creating report WITHOUT image...');
      
      const requestData = {
        titulo: reportData.titulo || reportData.title || '',
        descripcion: reportData.descripcion || reportData.description || '',
        ubicacion: reportData.ubicacion || reportData.location || '',
        categoria: reportData.categoria || reportData.category || 'general',
        idUsuario: reportData.idUsuario
      };

      console.log('\nüìä Datos enviados al servidor (JSON):');
      console.log('  titulo:', requestData.titulo);
      console.log('  descripcion:', requestData.descripcion);
      console.log('  ubicacion:', requestData.ubicacion);
      console.log('  categoria:', requestData.categoria);
      console.log('  idUsuario:', requestData.idUsuario);
      console.log('  imagen: No');

      const response = await fetch(`${this.baseUrl}/api/reports`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      console.log('üì° JSON response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Report created successfully with JSON');
        return { success: true, data: result };
      } else {
        const errorText = await response.text();
        console.error('‚ùå JSON request failed:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error in JSON request:', error);
      return {
        success: false,
        error: 'Error de red al crear el reporte'
      };
    }
  }

  // ‚úÖ OBTENER REPORTES DEL USUARIO ACTUAL
  async getUserReports(userId = null) {
    try {
      console.log('üì° Fetching user reports...');
      
      // ‚úÖ SI NO SE PROPORCIONA userId, OBTENER DEL USUARIO ACTUAL
      if (!userId) {
        const currentUser = await this.getCurrentUser();
        if (!currentUser) {
          console.error('‚ùå No current user found for getUserReports');
          return {
            success: false,
            error: 'Usuario no encontrado'
          };
        }
        userId = currentUser.idUsuario;
      }

      console.log('üìã Loading reports for user ID:', userId);
      console.log('üîó URL:', `${this.baseUrl}/api/reports/user/${userId}`);

      const response = await fetch(`${this.baseUrl}/api/reports/user/${userId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('üì° Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ User reports fetched successfully:', result.reportCount || 0, 'reports');
        console.log('üìä Server response:', {
          success: result.success,
          reportCount: result.reportCount,
          fromCache: result.fromCache
        });

        const reports = result.reports || [];
        console.log('‚úÖ Successfully loaded', reports.length, 'user reports');
        
        // Log image statistics
        const reportsWithImages = reports.filter(report => report.imagen).length;
        console.log('üì∑ Reports with images:', reportsWithImages);

        return {
          success: true,
          reports: reports,
          reportCount: reports.length,
          fromCache: result.fromCache || false
        };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to fetch user reports:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error fetching user reports:', error);
      return {
        success: false,
        error: 'Error de red al obtener los reportes'
      };
    }
  }

  // ‚úÖ OBTENER TODOS LOS REPORTES (ADMIN)
  async getReports() {
    try {
      console.log('üì° Fetching all reports...');
      console.log('üîó URL:', `${this.baseUrl}/api/reports`);

      const response = await fetch(`${this.baseUrl}/api/reports`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('üì° Response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Reports fetched successfully:', result.reportCount || 0, 'reports');
        
        const reports = result.reports || [];
        console.log('‚úÖ Successfully loaded', reports.length, 'reports');
        
        return {
          success: true,
          reports: reports,
          reportCount: reports.length,
          fromCache: result.fromCache || false
        };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to fetch reports:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error fetching reports:', error);
      return {
        success: false,
        error: 'Error de red al obtener los reportes'
      };
    }
  }

  // ‚úÖ OBTENER REPORTE ESPEC√çFICO
  async getReport(id) {
    try {
      console.log('üì° Fetching report:', id);

      const response = await fetch(`${this.baseUrl}/api/reports/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Report fetched successfully');
        return { success: true, report: result.report };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to fetch report:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error fetching report:', error);
      return {
        success: false,
        error: 'Error de red al obtener el reporte'
      };
    }
  }

  // ‚úÖ ACTUALIZAR REPORTE
  async updateReport(id, reportData) {
    try {
      console.log('üîÑ [SERVICE] Updating report:', id);
      console.log('üìã [SERVICE] Update data:', reportData);

      // ‚úÖ NUEVO: Verificar si hay imagen para actualizar
      const hasImage = reportData.imagen && reportData.imagen.uri;
      
      console.log('üñºÔ∏è [SERVICE] An√°lisis de imagen:', {
        hasImage,
        imageObject: reportData.imagen,
        imageUri: reportData.imagen?.uri,
        isExisting: reportData.imagen?.isExisting
      });
      
      if (hasImage) {
        console.log('üñºÔ∏è [SERVICE] Actualizando reporte con nueva imagen');
        
        // ‚úÖ USAR FormData para imagen
        const formData = new FormData();
        
        // Agregar campos del reporte
        formData.append('titulo', reportData.titulo);
        formData.append('descripcion', reportData.descripcion);
        formData.append('ubicacion', reportData.ubicacion);
        formData.append('categoria', reportData.categoria);
        
        console.log('üìù [SERVICE] Campos del formulario agregados al FormData');
        
        // ‚úÖ Agregar imagen si es nueva (no existente)
        if (!reportData.imagen.isExisting) {
          const imageFile = {
            uri: reportData.imagen.uri,
            type: reportData.imagen.type || 'image/jpeg',
            name: reportData.imagen.name || `reporte-${Date.now()}.jpg`
          };
          
          formData.append('imagen', imageFile);
          console.log('üñºÔ∏è [SERVICE] Imagen nueva agregada al FormData:', imageFile);
        } else {
          console.log('üñºÔ∏è [SERVICE] Imagen existente, NO se agrega al FormData');
        }
        
        console.log('üì° [SERVICE] Enviando PUT request con FormData a:', `${this.baseUrl}/api/reports/${id}`);
        
        const response = await fetch(`${this.baseUrl}/api/reports/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'multipart/form-data',
          },
          body: formData,
        });
        
        console.log('üì° [SERVICE] Respuesta recibida:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok
        });
        
        if (response.ok) {
          const result = await response.json();
          console.log('‚úÖ [SERVICE] Report updated successfully with image:', result);
          return { success: true, data: result };
        } else {
          const errorText = await response.text();
          console.error('‚ùå [SERVICE] Failed to update report with image:', response.status, errorText);
          return {
            success: false,
            error: `Error del servidor: ${response.status} - ${errorText}`
          };
        }
        
      } else {
        console.log('üìù [SERVICE] Actualizando reporte sin imagen');
        
        // ‚úÖ ACTUALIZACI√ìN SIN IMAGEN - JSON normal
        console.log('üì° [SERVICE] Enviando PUT request con JSON a:', `${this.baseUrl}/api/reports/${id}`);
        
        const response = await fetch(`${this.baseUrl}/api/reports/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(reportData),
        });

        console.log('üì° [SERVICE] Respuesta recibida:', {
          status: response.status,
          statusText: response.statusText,
          ok: response.ok
        });

        if (response.ok) {
          const result = await response.json();
          console.log('‚úÖ [SERVICE] Report updated successfully without image:', result);
          return { success: true, data: result };
        } else {
          const errorText = await response.text();
          console.error('‚ùå [SERVICE] Failed to update report:', response.status, errorText);
          return {
            success: false,
            error: `Error del servidor: ${response.status} - ${errorText}`
          };
        }
      }

    } catch (error) {
      console.error('‚ùå [SERVICE] Error updating report:', error);
      return {
        success: false,
        error: 'Error de red al actualizar el reporte: ' + error.message
      };
    }
  }

  // ‚úÖ ACTUALIZAR ESTADO DEL REPORTE
  async updateReportStatus(id, status) {
    try {
      console.log('üîÑ Updating report status:', id, 'to:', status);

      const response = await fetch(`${this.baseUrl}/api/reports/${id}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Report status updated successfully');
        return { success: true, data: result };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to update report status:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error updating report status:', error);
      return {
        success: false,
        error: 'Error de red al actualizar el estado del reporte'
      };
    }
  }

  // ‚úÖ ELIMINAR REPORTE
  async deleteReport(id) {
    try {
      console.log('üóëÔ∏è Deleting report:', id);

      const response = await fetch(`${this.baseUrl}/api/reports/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Report deleted successfully');
        return { success: true, data: result };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to delete report:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error deleting report:', error);
      return {
        success: false,
        error: 'Error de red al eliminar el reporte'
      };
    }
  }

  // ‚úÖ ESTAD√çSTICAS
  async getStats() {
    try {
      console.log('üìä Fetching statistics...');

      const response = await fetch(`${this.baseUrl}/api/reports/stats`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Statistics fetched successfully');
        return { success: true, stats: result.stats };
      } else {
        const errorText = await response.text();
        console.error('‚ùå Failed to fetch statistics:', response.status, errorText);
        return {
          success: false,
          error: `Error del servidor: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Error fetching statistics:', error);
      return {
        success: false,
        error: 'Error de red al obtener estad√≠sticas'
      };
    }
  }

  // ‚úÖ PROBAR CONEXI√ìN
  async testConnection() {
    try {
      console.log('üîå Testing connection...');

      const response = await fetch(`${this.baseUrl}/api/test`, {
        method: 'GET',
        timeout: 10000,
      });

      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Connection test successful');
        return { success: true, data: result };
      } else {
        console.error('‚ùå Connection test failed:', response.status);
        return {
          success: false,
          error: `Error de conexi√≥n: ${response.status}`
        };
      }

    } catch (error) {
      console.error('‚ùå Connection test error:', error);
      return {
        success: false,
        error: 'Error de red'
      };
    }
  }

  // ‚úÖ CERRAR SESI√ìN
  async logout() {
    try {
      console.log('üö™ Logging out...');
      
      await AsyncStorage.removeItem('userSession');
      await AsyncStorage.removeItem('userData');
      
      console.log('‚úÖ User session cleared');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå Error during logout:', error);
      return {
        success: false,
        error: 'Error al cerrar sesi√≥n'
      };
    }
  }
}

export default new ReportService();