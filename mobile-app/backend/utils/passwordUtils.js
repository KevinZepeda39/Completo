// backend/utils/passwordUtils.js
// Utilidades para manejo seguro de contrase√±as

const bcrypt = require('bcrypt');

// Configuraci√≥n de bcrypt
const SALT_ROUNDS = 12; // N√∫mero de rondas de salt (m√°s alto = m√°s seguro pero m√°s lento)

/**
 * Hashea una contrase√±a usando bcrypt
 * @param {string} password - Contrase√±a en texto plano
 * @returns {Promise<string>} - Contrase√±a hasheada
 */
async function hashPassword(password) {
  try {
    if (!password || typeof password !== 'string') {
      throw new Error('Contrase√±a inv√°lida');
    }
    
    console.log('üîê Hashing password with bcrypt...');
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    console.log('‚úÖ Password hashed successfully');
    
    return hashedPassword;
  } catch (error) {
    console.error('‚ùå Error hashing password:', error);
    throw new Error('Error al procesar la contrase√±a');
  }
}

/**
 * Verifica una contrase√±a contra su hash
 * @param {string} password - Contrase√±a en texto plano a verificar
 * @param {string} hashedPassword - Contrase√±a hasheada almacenada
 * @returns {Promise<boolean>} - true si la contrase√±a es correcta
 */
async function verifyPassword(password, hashedPassword) {
  try {
    if (!password || !hashedPassword) {
      console.log('‚ö†Ô∏è Missing password or hash for verification');
      return false;
    }
    
    console.log('üîç Verifying password with bcrypt...');
    const isValid = await bcrypt.compare(password, hashedPassword);
    console.log('‚úÖ Password verification result:', isValid);
    
    return isValid;
  } catch (error) {
    console.error('‚ùå Error verifying password:', error);
    return false;
  }
}

/**
 * Verifica si una contrase√±a ya est√° hasheada
 * @param {string} password - Contrase√±a a verificar
 * @returns {boolean} - true si ya est√° hasheada
 */
function isPasswordHashed(password) {
  if (!password || typeof password !== 'string') {
    return false;
  }
  
  // Las contrase√±as hasheadas con bcrypt tienen un formato espec√≠fico
  // Comienzan con $2b$ o $2a$ y tienen una longitud espec√≠fica
  return /^\$2[ab]\$\d{1,2}\$/.test(password);
}

/**
 * Migra contrase√±as existentes sin hash a bcrypt
 * @param {string} plainPassword - Contrase√±a en texto plano
 * @returns {Promise<string>} - Contrase√±a hasheada
 */
async function migratePassword(plainPassword) {
  try {
    if (isPasswordHashed(plainPassword)) {
      console.log('‚ÑπÔ∏è Password already hashed, no migration needed');
      return plainPassword;
    }
    
    console.log('üîÑ Migrating plain password to bcrypt...');
    const hashedPassword = await hashPassword(plainPassword);
    console.log('‚úÖ Password migration completed');
    
    return hashedPassword;
  } catch (error) {
    console.error('‚ùå Error migrating password:', error);
    throw new Error('Error al migrar la contrase√±a');
  }
}

/**
 * Valida la fortaleza de una contrase√±a
 * @param {string} password - Contrase√±a a validar
 * @returns {object} - Objeto con informaci√≥n de fortaleza
 */
function validatePasswordStrength(password) {
  if (!password || typeof password !== 'string') {
    return {
      isValid: false,
      score: 0,
      issues: ['La contrase√±a es requerida']
    };
  }
  
  const issues = [];
  let score = 0;
  
  // Longitud m√≠nima
  if (password.length < 8) {
    issues.push('Debe tener al menos 8 caracteres');
  } else if (password.length >= 12) {
    score += 2;
  } else {
    score += 1;
  }
  
  // Caracteres especiales
  if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) {
    score += 1;
  } else {
    issues.push('Incluir caracteres especiales mejora la seguridad');
  }
  
  // N√∫meros
  if (/\d/.test(password)) {
    score += 1;
  } else {
    issues.push('Incluir n√∫meros mejora la seguridad');
  }
  
  // May√∫sculas y min√∫sculas
  if (/[a-z]/.test(password) && /[A-Z]/.test(password)) {
    score += 1;
  } else {
    issues.push('Incluir may√∫sculas y min√∫sculas mejora la seguridad');
  }
  
  // Contrase√±as comunes (lista b√°sica)
  const commonPasswords = [
    'password', '123456', '123456789', 'qwerty', 'abc123',
    'password123', 'admin', 'letmein', 'welcome', 'monkey'
  ];
  
  if (commonPasswords.includes(password.toLowerCase())) {
    issues.push('Esta contrase√±a es muy com√∫n, elige algo m√°s √∫nico');
    score = Math.max(0, score - 2);
  }
  
  const isValid = score >= 3 && password.length >= 8;
  
  return {
    isValid,
    score: Math.min(score, 5),
    issues,
    strength: score < 2 ? 'Muy d√©bil' : 
              score < 3 ? 'D√©bil' : 
              score < 4 ? 'Regular' : 
              score < 5 ? 'Buena' : 'Excelente'
  };
}

module.exports = {
  hashPassword,
  verifyPassword,
  isPasswordHashed,
  migratePassword,
  validatePasswordStrength,
  SALT_ROUNDS
};
